name: iOS Release → TestFlight (Flutter)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Optionnel: forcer un build number > précédent (sinon auto)"
        required: false
        default: ""

jobs:
  release:
    name: Archive, Sign & Upload TestFlight
    runs-on: macos-15

    env:
      APP_BUNDLE_ID: com.gearup.app
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
      CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
      PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}

      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Xcode / macOS info
        shell: bash
        run: |
          xcodebuild -version
          xcode-select -p
          sw_vers

      - name: Set Flutter 3.35.5 (stable, arm64)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.5"
          channel: "stable"
          architecture: "arm64"

      - name: Flutter pub get
        run: flutter pub get

      # IMPORT DE LA CERTIF DANS UN KEYCHAIN TEMPORNAIRE (fiable)
      - name: Install signing certificate (Apple p12) into keychain
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.CERT_P12_BASE64 }}
          p12-password: ${{ env.CERT_P12_PASSWORD }}

      # INSTALLATION DU PROVISIONING PROFILE (depuis le secret Base64)
      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$PROV_PROFILE_BASE64" | base64 --decode > "$RUNNER_TEMP/profile.mobileprovision"

          PROFILE_NAME=$(/usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" | \
            /usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin)
          PROFILE_UUID=$(/usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" | \
            /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin)

          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "Installed profile: $PROFILE_NAME ($PROFILE_UUID)"

      # PODS à jour (sans sudo)
      - name: Pods install (fresh)
        working-directory: ios
        shell: bash
        run: |
          rm -f Podfile.lock
          pod install --repo-update

      # CALCUL DU BUILD NUMBER (monotone)
      - name: Compute build number
        id: bn
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.build_number }}" ]]; then
            echo "value=${{ github.event.inputs.build_number }}" >> $GITHUB_OUTPUT
          else
            # offset +1000: évite tout conflit si tu as déjà fait des builds manuels
            echo "value=$((1000 + ${{ github.run_number }}))" >> $GITHUB_OUTPUT
          fi

      # ExportOptions.plist généré à la volée (pas de secret en clair dans le repo)
      - name: Create ExportOptions.plist (App Store)
        shell: bash
        run: |
          cat > ios/ci_export_appstore.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>signingCertificate</key><string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>uploadSymbols</key><true/>
              <key>uploadBitcode</key><false/>
              <key>manageAppVersionAndBuildNumber</key><false/>
              <key>destination</key><string>export</string>
            </dict>
          </plist>
          PLIST

      # BUILD + ARCHIVE + EXPORT IPA (signé)
      - name: Build signed IPA
        env:
          BUILD_NUMBER: ${{ steps.bn.outputs.value }}
        shell: bash
        run: |
          echo "Using build number: $BUILD_NUMBER"
          flutter clean
          # IMPORTANT: on force un build-name croissant (1.0.${BUILD_NUMBER})
          flutter build ipa \
            --release \
            --build-name "1.0.${BUILD_NUMBER}" \
            --build-number "${BUILD_NUMBER}" \
            --export-options-plist ios/ci_export_appstore.plist \
            --no-tree-shake-icons

      # Prépare la clé API privée pour iTMSTransporter (~/.private_keys/AuthKey_<ID>.p8)
      - name: Prepare App Store Connect API key file
        shell: bash
        run: |
          mkdir -p "$HOME/.private_keys"
          echo "$ASC_KEY_P8_BASE64" | base64 --decode > "$HOME/.private_keys/AuthKey_${ASC_KEY_ID}.p8"
          chmod 600 "$HOME/.private_keys/AuthKey_${ASC_KEY_ID}.p8"
          ls -l "$HOME/.private_keys"

      # UPLOAD TESTFLIGHT
      - name: Upload to TestFlight (iTMSTransporter)
        shell: bash
        run: |
          IPA="build/ios/ipa/Runner.ipa"
          if [[ ! -f "$IPA" ]]; then
            echo "IPA not found at $IPA"; exit 1
          fi
          xcrun iTMSTransporter \
            -m upload \
            -assetFile "$IPA" \
            -apiKey "$ASC_KEY_ID" \
            -apiIssuer "$ASC_ISSUER_ID" \
            -verbose

      - name: Keep artifacts (IPA + ExportOptions)
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-and-export
          path: |
            build/ios/ipa/*.ipa
            ios/ci_export_appstore.plist