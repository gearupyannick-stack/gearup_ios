name: build-and-upload-ios
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Show macOS & Xcode
        run: |
          sw_vers
          xcodebuild -version

      - name: CocoaPods install
        working-directory: ios
        run: pod install --repo-update

      - name: Write signing files from secrets
        env:
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
          APP_STORE_CONNECT_API_KEY_P8: ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          mkdir -p "$HOME/certs"
          echo "$CERT_P12_BASE64"        | base64 --decode > "$HOME/certs/dist.p12"
          echo "$PROV_PROFILE_BASE64"    | base64 --decode > "$HOME/certs/profile.mobileprovision"
          echo "$APP_STORE_CONNECT_API_KEY_P8" | base64 --decode > "$HOME/certs/AuthKey.p8"

          echo "Validating P12 password quicklyâ€¦"
          set +e
          openssl pkcs12 -in "$HOME/certs/dist.p12" -noout -info -passin pass:"$CERT_P12_PASSWORD" >/dev/null
          echo "status=$?"
          set -e

      - name: Import certificate & key to keychain
        env:
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
        run: |
          KEYCHAIN="$HOME/Library/Keychains/build.keychain-db"
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "" build.keychain
          # Import the p12 directly (simplest & robust)
          security import "$HOME/certs/dist.p12" -k build.keychain -P "${CERT_P12_PASSWORD}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security list-keychain -d user -s build.keychain login.keychain-db
          echo "Codesign identities:"
          security find-identity -v -p codesigning build.keychain || true

      - name: Install provisioning profile (and export UUID & Name)
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i $HOME/certs/profile.mobileprovision)")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$(security cms -D -i $HOME/certs/profile.mobileprovision)")
          cp "$HOME/certs/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Installed provisioning profile:"
          echo "  UUID: $PROFILE_UUID"
          echo "  Name: $PROFILE_NAME"
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV

      - name: Build iOS archive (manual signing with profile UUID)
        env:
          TEAM_ID:         ${{ secrets.TEAM_ID }}
          APP_BUNDLE_ID:   ${{ secrets.APP_BUNDLE_ID }}
        run: |
          rm -rf build/ios
          cd ios
          xcodebuild \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath "$GITHUB_WORKSPACE/build/ios/Runner.xcarchive" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_BUNDLE_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Create export options (App Store)
        env:
          TEAM_ID:       ${{ secrets.TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          # Use the profile NAME for export mapping (exportOptions expects names, not UUIDs)
          cat > exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>compileBitcode</key><false/>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
          </dict>
          </plist>
          PLIST
          echo "exportOptions.plist:"
          cat exportOptions.plist

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$GITHUB_WORKSPACE/build/ios/Runner.xcarchive" \
            -exportPath  "$GITHUB_WORKSPACE/build/ios/export" \
            -exportOptionsPlist exportOptions.plist \
            | xcpretty && exit ${PIPESTATUS[0]}
          ls -lah "$GITHUB_WORKSPACE/build/ios/export"

      # Optional: upload to TestFlight with the API key (you already have these)
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID:     ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID:  ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_P8:     ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          xcrun altool --upload-app \
            -f "$GITHUB_WORKSPACE/build/ios/export/Runner.ipa" \
            --type ios \
            --apiKey "${APP_STORE_CONNECT_API_KEY_ID}" \
            --apiIssuer "${APP_STORE_CONNECT_API_ISSUER_ID}" \
            --apiKeyFile "$HOME/certs/AuthKey.p8"