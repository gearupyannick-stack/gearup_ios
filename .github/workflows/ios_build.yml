name: Flutter iOS Build and Sign

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest # Required for iOS builds

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      # --- 1. Environment Setup ---
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # or 'beta' if you need it

      - name: 📦 Get Dependencies
        run: flutter pub get

      # --- 2. Code Signing Setup ---
      - name: 🔐 Install Apple Certificate and Provisioning Profile
        env:
          # Your GitHub Secret Names
          P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          
          # Your local file names (for reference in log)
          P12_NAME: ios_distribution.p12
          PROFILE_NAME: GearupAppStore.mobileprovision
          
        run: |
          # 1. Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 7200 "$KEYCHAIN_PATH"

          # 2. Decode and import the certificate (.p12)
          P12_FILE_PATH=$RUNNER_TEMP/$P12_NAME
          echo "$P12_BASE64" | base64 --decode > "$P12_FILE_PATH"
          security import "$P12_FILE_PATH" -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign

          # 3. Decode and install the provisioning profile
          PROFILE_DIR=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR"/$PROFILE_NAME
          echo "$PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"

          # Verify the installed identity (optional, but useful for debugging)
          security find-identity -p codesigning "$KEYCHAIN_PATH"

      # --- 3. Build and Sign ---
      - name: 🏗️ Build and Sign IPA
        # The flutter build ipa command uses xcodebuild internally. 
        # It automatically finds the installed certificate and profile.
        run: |
          flutter build ipa --release

      # --- 4. Cleanup and Artifacts ---
      - name: 🧹 Clean Up Keychain and Files
        if: always() # Run this even if previous steps fail
        run: |
          security delete-keychain "$RUNNER_TEMP/build.keychain"

      - name: 📦 Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Signed-Gearup-iOS-IPA
          # The IPA is typically found in this path for Flutter projects
          path: build/ios/ipa/*.ipa