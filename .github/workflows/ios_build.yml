name: iOS Build & Publish

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-upload:
    runs-on: macos-latest

    env:
      FLUTTER_VERSION: 3.35.1                          # matches Dart ≥3.6 for ads 6.x; you’re using ads 5.3.1 so 3.35.1 is OK
      BUNDLE_ID: com.yourcompany.yourapp               # <-- set
      TEAM_ID: YOURTEAMID                              # <-- set (Apple Developer Team ID)
      PROFILE_NAME: Your_Ad_Hoc_or_AppStore_Profile    # <-- set (exact profile name)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      # ---------- Code signing material from secrets ----------
      # Required secrets:
      #  - P12_B64                : base64 of your signing certificate .p12
      #  - P12_PASSWORD           : password for the .p12
      #  - KEYCHAIN_PASSWORD      : any random string to protect the temp keychain
      #  - MOBILEPROVISION_B64    : base64 of your .mobileprovision (App Store or Ad Hoc)
      #  - APP_STORE_CONNECT_API_KEY_ID
      #  - APP_STORE_CONNECT_API_ISSUER_ID
      #  - APP_STORE_CONNECT_API_KEY (contents of the .p8 private key)
      - name: Create keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Import .p12 certificate
        run: |
          echo "${P12_B64}" | base64 --decode > dist.p12
          security import dist.p12 -k build.keychain -P "$P12_PASSWORD" -A
          security list-keychains -d user -s build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        env:
          P12_B64: ${{ secrets.P12_B64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${MOBILEPROVISION_B64}" | base64 --decode > profile.mobileprovision
          # Extract UUID so Xcode finds it
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        env:
          MOBILEPROVISION_B64: ${{ secrets.MOBILEPROVISION_B64 }}

      - name: Write ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          PLIST

      - name: Set Xcode signing (project env)
        run: |
          /usr/libexec/PlistBuddy -c "Set :DEVELOPMENT_TEAM ${TEAM_ID}" ios/Runner.xcodeproj/project.pbxproj || true

      - name: Build IPA
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: build/ios/ipa/*.ipa

      # ---------- TestFlight upload ----------
      - name: Install fastlane
        run: brew install fastlane

      - name: Create App Store Connect API key file
        run: |
          cat > AuthKey.json <<JSON
          {
            "key_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}",
            "key": "${{ secrets.APP_STORE_CONNECT_API_KEY }}",
            "in_house": false
          }
          JSON

      - name: Upload to TestFlight
        run: |
          IPA_PATH=$(ls -1 build/ios/ipa/*.ipa | head -n 1)
          fastlane pilot upload \
            --api_key_path AuthKey.json \
            --ipa "$IPA_PATH" \
            --skip_waiting_for_build_processing true
