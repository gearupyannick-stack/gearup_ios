name: iOS Build & Sign + TestFlight

on:
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: "Upload the signed IPA to TestFlight"
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

jobs:
  build-ios:
    runs-on: macos-15
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.app/Contents/Developer
      KEYCHAIN_NAME: build.keychain-db
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Preflight ----------
      - name: Preflight check App Store Connect secrets
        if: ${{ inputs.upload_to_testflight == 'true' }}
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          ASC_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          echo "KeyId: ${#ASC_KEY_ID}, IssuerId: ${#ASC_ISSUER_ID}, p8: ${#ASC_KEY_CONTENTS}"
          if [[ -z "${ASC_KEY_CONTENTS}" ]]; then
            echo "::error::App Store Connect key missing"; exit 1; fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install CocoaPods
        run: gem install cocoapods --no-document

      - name: Pod install
        working-directory: ios
        run: |
          pod repo update
          pod install

      # ---------- Restrict to iPhone ----------
      - name: Restrict build to iPhone only
        run: |
          PLIST=ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Delete :UIDeviceFamily" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily array" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily:0 integer 1" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :UIRequiresFullScreen bool YES" "$PLIST"
          echo "✅ iPhone-only enforced"

      # ---------- Decode signing ----------
      - name: Decode and verify P12
        env:
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
        run: |
          echo "$CERT_P12_BASE64" | base64 --decode > orig.p12
          openssl pkcs12 -in orig.p12 -nokeys -passin pass:"$CERT_P12_PASSWORD" -info >/dev/null
          echo "P12 OK ($(stat -f%z orig.p12) bytes)"

      - name: Validate provisioning profile
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
        run: |
          echo "$PROV_PROFILE_BASE64" | base64 --decode > app.mobileprovision
          /usr/bin/security cms -D -i app.mobileprovision >/dev/null
          echo "Provisioning profile OK"

      # ---------- Repack P12 ----------
      - name: Repack certificate
        env:
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
        run: |
          openssl pkcs12 -in orig.p12 -clcerts -nokeys -passin pass:"$CERT_P12_PASSWORD" -out dist-cert.pem
          openssl pkcs12 -in orig.p12 -nocerts -nodes -passin pass:"$CERT_P12_PASSWORD" -out dist-key.pem
          export REPACK_PASS=$(openssl rand -hex 12)
          openssl pkcs12 -export -inkey dist-key.pem -in dist-cert.pem -name "Apple Distribution (Repacked)" -passout pass:$REPACK_PASS -out repacked.p12
          echo "REPACK_PASS=$REPACK_PASS" >> $GITHUB_ENV

      - name: Create keychain and import cert
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security import repacked.p12 -k "$KEYCHAIN_NAME" -P "$REPACK_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"

      - name: Install provisioning profile
        id: prov
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROV_PROFILE_BASE64" | base64 --decode > app.mobileprovision
          /usr/bin/security cms -D -i app.mobileprovision > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          echo "uuid=$UUID" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "✅ Installed $NAME ($UUID)"

      # ---------- ExportOptions.plist ----------
      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.prov.outputs.name }}</string>
            </dict>
            <key>destination</key><string>export</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          PLIST
          echo "✅ ExportOptions.plist created"

      # ---------- Force code signing for Flutter ----------
      - name: Configure signing overrides
        run: |
          {
            echo "CODE_SIGN_IDENTITY=Apple Distribution: Yannick Durindel (${TEAM_ID})"
            echo "DEVELOPMENT_TEAM=${TEAM_ID}"
            echo "PROVISIONING_PROFILE_SPECIFIER=${{ steps.prov.outputs.name }}"
            echo "PRODUCT_BUNDLE_IDENTIFIER=${APP_BUNDLE_ID}"
          } >> ios/Flutter/Release.xcconfig
          cat ios/Flutter/Release.xcconfig

      # ---------- Build IPA ----------
      - name: Build signed IPA
        run: |
          flutter build ipa --release --export-options-plist=ExportOptions.plist \
            --build-name=1.0.1 --build-number=2

      - name: Upload signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-signed
          path: build/ios/ipa/*.ipa

      # ---------- TestFlight ----------
      - name: Install ASC key
        if: ${{ inputs.upload_to_testflight == 'true' }}
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$ASC_KEY_CONTENTS" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8

      - name: Upload to TestFlight
        if: ${{ inputs.upload_to_testflight == 'true' }}
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        run: |
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n1)
          xcrun altool --upload-app --type ios --file "$IPA_PATH" --apiKey "$ASC_KEY_ID" --apiIssuer "$ASC_ISSUER_ID" --verbose