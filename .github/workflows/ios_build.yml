name: ios

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ios:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      # Pin Xcode 15.4 (has iOS 17.5 SDK)
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          flutter-version: '3.35.5'

      - run: flutter --version
      - run: flutter pub get

      # CocoaPods
      - name: Install pods
        working-directory: ios
        run: pod install --repo-update

      # Fail fast if required secrets are missing (uses your EXISTING names)
      - name: Check required secrets
        shell: bash
        run: |
          set -euo pipefail
          # p12 can be in either of these (support both)
          P12_B64="${DISTRIBUTION_P12_BASE64:-${CERT_P12_BASE64:-}}"
          : "${P12_B64:?Missing p12 base64: set DISTRIBUTION_P12_BASE64 or CERT_P12_BASE64}"
          : "${PROV_PROFILE_BASE64:?Missing PROV_PROFILE_BASE64}"
          : "${CERT_P12_PASSWORD:?Missing CERT_P12_PASSWORD}"
          : "${TEAM_ID:?Missing TEAM_ID}"
          : "${APP_BUNDLE_ID:?Missing APP_BUNDLE_ID}"
          : "${KEYCHAIN_PASSWORD:?Missing KEYCHAIN_PASSWORD}"
        env:
          DISTRIBUTION_P12_BASE64: ${{ secrets.DISTRIBUTION_P12_BASE64 }}
          CERT_P12_BASE64:         ${{ secrets.CERT_P12_BASE64 }}
          PROV_PROFILE_BASE64:     ${{ secrets.PROV_PROFILE_BASE64 }}
          CERT_P12_PASSWORD:       ${{ secrets.CERT_P12_PASSWORD }}
          TEAM_ID:                 ${{ secrets.TEAM_ID }}
          APP_BUNDLE_ID:           ${{ secrets.APP_BUNDLE_ID }}
          KEYCHAIN_PASSWORD:       ${{ secrets.KEYCHAIN_PASSWORD }}

      # Prepare signing (keychain, provisioning profile)
      - name: Set up signing
        id: signing
        shell: bash
        run: |
          set -euo pipefail

          P12_B64="${DISTRIBUTION_P12_BASE64:-${CERT_P12_BASE64:-}}"

          # Decode files
          echo "$P12_B64"            | base64 --decode > dist.p12
          echo "$PROV_PROFILE_BASE64" | base64 --decode > app.mobileprovision

          # Validate profile and extract name/uuid
          /usr/bin/security cms -D -i app.mobileprovision > profile.plist
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          echo "profile_name=$PROFILE_NAME" >> "$GITHUB_OUTPUT"
          echo "profile_uuid=$PROFILE_UUID" >> "$GITHUB_OUTPUT"

          # Create & unlock build keychain
          KEYCHAIN="build.keychain-db"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security list-keychain -d user -s "$KEYCHAIN"

          # Import p12
          security import dist.p12 -k "$KEYCHAIN" -P "$CERT_P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security

        env:
          DISTRIBUTION_P12_BASE64: ${{ secrets.DISTRIBUTION_P12_BASE64 }}
          CERT_P12_BASE64:         ${{ secrets.CERT_P12_BASE64 }}
          PROV_PROFILE_BASE64:     ${{ secrets.PROV_PROFILE_BASE64 }}
          CERT_P12_PASSWORD:       ${{ secrets.CERT_P12_PASSWORD }}
          KEYCHAIN_PASSWORD:       ${{ secrets.KEYCHAIN_PASSWORD }}

      # Export options (manual signing with your profile)
      - name: Write ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.signing.outputs.profile_name }}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>uploadBitcode</key><false/>
            <key>uploadSymbols</key><true/>
          </dict>
          </plist>
          PLIST
        env:
          TEAM_ID:       ${{ secrets.TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}

      # Archive (uses Xcode 15.4 selected above)
      - name: Build archive
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/ios/archive/Runner.xcarchive \
            clean archive

      # Export IPA
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios/ipa

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/ipa/*.ipa