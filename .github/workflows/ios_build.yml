# .github/workflows/ios_build.yml
name: iOS build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.1'
          cache: true

      # Assure la présence de ios/Flutter/podhelper.rb avant toute commande qui déclenche CocoaPods
      - name: Ensure podhelper.rb exists
        run: |
          echo "FLUTTER_ROOT=$FLUTTER_ROOT"
          mkdir -p ios/Flutter
          cp "$FLUTTER_ROOT/packages/flutter_tools/bin/podhelper.rb" ios/Flutter/podhelper.rb
          ls -l ios/Flutter

      - name: Flutter pub get
        run: flutter pub get

      - name: Clean
        run: flutter clean

      # Build IPA non signé pour valider la chaîne iOS sur macOS runner
      - name: Build unsigned IPA
        run: flutter build ipa --release --no-codesign

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: Runner-ipa
          path: build/ios/ipa/*.ipa

      # Optionnel: build simulateur pour vérif rapide
      - name: Build iOS Simulator .app
        run: |
          flutter build ios --simulator --release
          cd build/ios/iphonesimulator
          zip -r Runner.app.zip Runner.app

      - name: Upload Simulator app
        uses: actions/upload-artifact@v4
        with:
          name: Runner-simulator
          path: build/ios/iphonesimulator/Runner.app.zip

      # Optionnel: upload TestFlight via API key (définis les secrets et mets le var repo ASC_UPLOAD=1)
      - name: Install Fastlane
        if: ${{ vars.ASC_UPLOAD == '1' }}
        run: gem install fastlane --no-document

      - name: Upload to TestFlight
        if: ${{ vars.ASC_UPLOAD == '1' }}
        env:
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}             # ex: com.gearup.learn
          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}       # ex: ABCDE12345
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }} # GUID issu App Store Connect
          APP_STORE_API_KEY_BASE64: ${{ secrets.APP_STORE_API_KEY_BASE64 }} # contenu .p8 encodé base64
        run: |
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n1)

          # Recrée la clé .p8 et génère un JSON d'API key pour Fastlane
          echo "$APP_STORE_API_KEY_BASE64" | base64 --decode > api_key.p8
          ruby -e '
            require "json";
            key = File.read("api_key.p8");
            j = {"key_id"=>ENV["APP_STORE_KEY_ID"], "issuer_id"=>ENV["APP_STORE_ISSUER_ID"], "key"=>key, "in_house"=>false};
            File.write("api_key.json", JSON.pretty_generate(j));
          '

          # Upload TestFlight (évite l’attente du traitement)
          fastlane pilot upload \
            --ipa "$IPA_PATH" \
            --api_key_path api_key.json \
            --skip_waiting_for_build_processing true
