name: iOS Build & Sign (robust PKCS#12 import)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: "Upload the signed IPA to TestFlight"
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

jobs:
  build-ios:
    runs-on: macos-14
    env:
      KEYCHAIN_NAME: build.keychain-db
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install CocoaPods
        run: gem install cocoapods --no-document

      - name: Pod install
        working-directory: ios
        run: |
          pod repo update
          pod install

      # --------- Validate P12 & prepare extraction ---------
      - name: Validate P12 secret/password
        env:
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
        run: |
          set -e
          echo "$CERT_P12_BASE64" | base64 --decode > cert.p12
          test -s cert.p12
          echo "P12 size: $(stat -f%z cert.p12) bytes"
          # Check password really opens the PKCS#12
          if ! openssl pkcs12 -in cert.p12 -nokeys -passin pass:"$CERT_P12_PASSWORD" -info >/dev/null 2>&1; then
            echo "::error::CERT_P12_PASSWORD doesn't match the .p12, or CERT_P12_BASE64 is invalid."
            exit 1
          fi

      - name: Create keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed 's/"//g')

      # ---------- Robust import: extract cert+key with OpenSSL, then import ----------
      - name: Import signing identity (OpenSSL extraction â†’ security import)
        env:
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
        run: |
          set -e
          # Extract the leaf certificate and private key from the PKCS#12
          openssl pkcs12 -in cert.p12 -clcerts -nokeys -passin pass:"$CERT_P12_PASSWORD" -out dist-cert.pem
          openssl pkcs12 -in cert.p12 -nocerts -nodes  -passin pass:"$CERT_P12_PASSWORD" -out dist-key.pem

          # Optional: clean key format (PKCS#8 unencrypted)
          openssl pkey -in dist-key.pem -out dist-key-unenc.pem

          # Import cert and key separately into the custom keychain
          security import dist-cert.pem -k "$KEYCHAIN_NAME" -A -t cert
          security import dist-key-unenc.pem -k "$KEYCHAIN_NAME" -A -t priv -f pem

          # Allow codesign tools to use the key non-interactively
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

          # Show identities to confirm
          security find-identity -v -p codesigning "$KEYCHAIN_NAME" || (echo "No signing identity found" && exit 1)

      - name: Install provisioning profile
        id: prov
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
        run: |
          set -e
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROV_PROFILE_BASE64" | base64 --decode > app.mobileprovision
          UUID=$(/usr/bin/security cms -D -i app.mobileprovision | /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin)
          NAME=$(/usr/bin/security cms -D -i app.mobileprovision | /usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin)
          echo "uuid=$UUID" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "Installed provisioning profile: $NAME ($UUID)"

      - name: Create ExportOptions.plist (manual signing)
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.prov.outputs.name }}</string>
            </dict>
            <key>destination</key><string>export</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>manageAppVersionAndBuildNumber</key><true/>
          </dict>
          </plist>
          PLIST

      - name: Build signed IPA
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-signed
          path: build/ios/ipa/*.ipa

      - name: Upload to TestFlight (optional)
        if: ${{ inputs.upload_to_testflight == 'true' }}
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          ASC_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          echo "$ASC_KEY_CONTENTS" > AuthKey_${ASC_KEY_ID}.p8
          IPA_PATH=$(ls -1 build/ios/ipa/*.ipa | head -n1)
          xcrun iTMSTransporter -m upload \
            -assetFile "$IPA_PATH" \
            -apiKey "$ASC_KEY_ID" \
            -apiIssuer "$ASC_ISSUER_ID" \
            -v informational