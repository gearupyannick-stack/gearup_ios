name: iOS Release (TestFlight)

on:
  workflow_dispatch:
  push:
    tags:
      - 'ios-v*'   # push a tag like ios-v1.2.3 to trigger

jobs:
  release:
    runs-on: macos-14
    env:
      BUNDLE_ID: com.gearup.learn
      APPLE_TEAM_ID: YOUR_TEAM_ID_HERE   # put your 10-char Team ID
      SCHEME: Runner                      # Flutter default
      CONFIG: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          sw_vers
          xcodebuild -version

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.0'
          channel: stable

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Cache pub
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Pub get
        run: flutter pub get

      - name: Install CocoaPods
        working-directory: ios
        run: |
          pod repo update
          pod install

      # Import the distribution certificate to a temporary keychain
      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}

      # Install provisioning profile
      - name: Install provisioning profile
        uses: apple-actions/import-provisioning-profile@v1
        with:
          profile-base64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

      # Build signed IPA using Flutter + Xcode export with your ExportOptions.plist
      - name: Build IPA
        run: |
          # Ensure the correct Xcode is selected (usually already is)
          xcode-select -p
          # Flutter archive step generates Xcode archive under build/ios/archive
          flutter build ipa \
            --release \
            --export-options-plist=ios/ExportOptions.plist

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/ipa/*.ipa

      # Install fastlane and upload to TestFlight via API key
      - name: Set up Ruby and Fastlane
        run: |
          gem install fastlane --no-document

      - name: Create App Store Connect API key file
        run: |
          echo "${{ secrets.APP_STORE_API_KEY_BASE64 }}" | base64 --decode > api_key.p8
          cat > api_key.json <<'JSON'
          {
            "key_id": "${{ secrets.APP_STORE_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_ISSUER_ID }}",
            "key": "<<INLINED_BY_STEP>>",
            "in_house": false
          }
          JSON
          # Inline the p8 content into the JSON
          KEY=$(sed 's/$/\\n/' api_key.p8 | tr -d '\n' | sed 's/\\n$//')
          ruby -e '
            require "json";
            j = JSON.parse(File.read("api_key.json"));
            j["key"] = File.read("api_key.p8");
            File.write("api_key.json", JSON.pretty_generate(j));
          '

      - name: Upload to TestFlight
        run: |
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n1)
          fastlane pilot upload \
            --ipa "$IPA_PATH" \
            --api_key_path api_key.json \
            --skip_waiting_for_build_processing true
