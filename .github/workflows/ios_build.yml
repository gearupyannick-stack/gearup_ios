name: iOS Signed Build & Upload

on:
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: macos-14
    env:
      APP_BUNDLE_ID: com.gearup.app
      TEAM_ID: ${{ secrets.TEAM_ID }}
      IOS_CERT_P12_PASSWORD: ${{ secrets.IOS_CERT_P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS files
        run: |
          git lfs install
          git lfs pull

      - name: Sanity
        run: |
          set -e
          sw_vers
          xcodebuild -version
          test -f ios/Runner.xcodeproj/project.pbxproj
          if head -n1 ios/Runner.xcodeproj/project.pbxproj | grep -q 'version https://git-lfs.github.com/spec'; then
            echo "ERROR: ios/Runner.xcodeproj/project.pbxproj is a Git LFS pointer"; exit 1
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: flutter pub get
        run: flutter pub get

      - name: Locate p12 and verify password
        run: |
          set -euo pipefail
          CANDIDATES="dist.p12 ios/dist.p12 ios/gearup/dist.p12"
          FOUND=""
          for p in $CANDIDATES; do [ -s "$p" ] && { FOUND="$p"; break; }; done
          [ -z "$FOUND" ] && { echo "ERROR: No dist.p12 found"; exit 1; }
          echo "Using $FOUND"
          [ "$FOUND" != "dist.p12" ] && cp -f "$FOUND" dist.p12 || echo "dist.p12 already in place"
          if [ -n "${IOS_CERT_P12_PASSWORD:-}" ]; then PASSOPT="-passin env:IOS_CERT_P12_PASSWORD"; else PASSOPT="-passin pass:"; fi
          # Confirm the password is valid
          openssl pkcs12 -in dist.p12 -noout -info $PASSOPT >/dev/null

      - name: Create signing keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          # Prefer our CI keychain
          security list-keychains -d user -s build.keychain login.keychain

      - name: Extract cert+key and import (no PKCS#8 conversion)
        run: |
          set -euo pipefail
          if [ -n "${IOS_CERT_P12_PASSWORD:-}" ]; then PASSOPT="-passin env:IOS_CERT_P12_PASSWORD"; else PASSOPT="-passin pass:"; fi

          # Extract leaf certificate and private key as PEM
          openssl pkcs12 -in dist.p12 $PASSOPT -clcerts -nokeys -out cert.cer
          openssl pkcs12 -in dist.p12 $PASSOPT -nocerts -nodes -out key.pem

          # Import into CI keychain
          security import cert.cer -k build.keychain -A -t cert
          # Import PEM key; no -f flag (auto-detects)
          security import key.pem  -k build.keychain -A -t priv -P ""
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Install provisioning profile from repo
        id: prov
        run: |
          set -euo pipefail
          PROFILE=$(ls *.mobileprovision ios/*.mobileprovision ios/gearup/*.mobileprovision 2>/dev/null | head -n1 || true)
          [ -z "$PROFILE" ] && { echo "ERROR: No .mobileprovision found in repo"; exit 1; }
          DIR="$HOME/Library/MobileDevice/Provisioning Profiles"; mkdir -p "$DIR"
          PLIST=$(/usr/bin/security cms -D -i "$PROFILE")
          NAME=$(echo "$PLIST" | /usr/bin/plutil -extract Name raw -)
          UUID=$(echo "$PLIST" | /usr/bin/plutil -extract UUID raw -)
          echo "Using profile: $NAME ($UUID)"
          cp -f "$PROFILE" "$DIR/$UUID.mobileprovision"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "uuid=$UUID" >> "$GITHUB_OUTPUT"

      - name: Force Xcode project signing to match profile + bundle id
        run: |
          set -euo pipefail
          PB=ios/Runner.xcodeproj/project.pbxproj
          BUNDLE="${APP_BUNDLE_ID}"
          TEAM="${TEAM_ID}"
          PROF="${{ steps.prov.outputs.name }}"

          echo "Before:"
          grep -nE 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE' "$PB" | head || true

          # Bundle id for all configs
          /usr/bin/sed -i '' -E "s/(PRODUCT_BUNDLE_IDENTIFIER = )[^;]+;/\1${BUNDLE};/g" "$PB"
          # Team for all configs
          /usr/bin/sed -i '' -E "s/(DEVELOPMENT_TEAM = )[^;]+;/\1${TEAM};/g" "$PB"
          # Manual signing
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_STYLE = )Automatic;/\1Manual;/g" "$PB"
          # Distribution identity everywhere
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = )[^;]+;/\1Apple Distribution;/g" "$PB"
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_IDENTITY = )iPhone Developer;/\1Apple Distribution;/g" "$PB"
          # Profile specifier for all configs (add or replace)
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" "$PB"; then
            /usr/bin/sed -i '' -E "s/(PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE};)/\1\n\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = ${PROF};/g" "$PB"
          else
            /usr/bin/sed -i '' -E "s/(PROVISIONING_PROFILE_SPECIFIER = )[^;]+;/\1${PROF};/g" "$PB"
          fi

          echo "After:"
          grep -nE 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE' "$PB" | head || true

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?><plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.prov.outputs.name }}</string>
            </dict>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>compileBitcode</key><false/>
            <key>uploadBitcode</key><false/>
          </dict></plist>
          PLIST
          /usr/bin/plutil -p ExportOptions.plist

      # Build without codesign so Flutter doesn't block on "development certs"
      - name: Flutter build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      # Sign + archive with xcodebuild directly
      - name: Archive with manual signing
        env:
          KEYCHAIN_PATH: ${{ runner.temp }}/keychain-path
        run: |
          set -euo pipefail
          # discover keychain path used by security (db vs not)
          if [ -f "$HOME/Library/Keychains/build.keychain-db" ]; then
            export KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
          else
            export KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"
          fi

          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APP_BUNDLE_ID}" \
            PROVISIONING_PROFILE_SPECIFIER="${{ steps.prov.outputs.name }}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain ${KEYCHAIN_PATH}" \
            clean archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios/ipa | xcpretty && exit ${PIPESTATUS[0]}

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: Signed-IPA
          path: build/ios/ipa/*.ipa
          if-no-files-found: error
