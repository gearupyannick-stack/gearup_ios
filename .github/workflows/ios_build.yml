name: iOS Build & Sign + TestFlight

on:
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: "Upload the signed IPA to TestFlight"
        required: true
        default: "false"
        type: choice
        options: ["false", "true"]

jobs:
  build-ios:
    runs-on: macos-15
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.app/Contents/Developer
      KEYCHAIN_NAME: build.keychain-db
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Install CocoaPods
        run: gem install cocoapods --no-document

      - name: Pod install
        working-directory: ios
        run: |
          pod repo update
          pod install

      # âœ… iPhone-only
      - name: Restrict build to iPhone only
        run: |
          PLIST=ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Delete :UIDeviceFamily" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily array" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily:0 integer 1" "$PLIST"
          plutil -p "$PLIST" | grep UIDeviceFamily
          echo "âœ… iPhone-only enforced"

      # âœ… Decode and import certificate
      - name: Import signing identity
        run: |
          set -e
          echo "Importing certificate..."
          security list-keychains -d user -s "$KEYCHAIN_NAME"
          security import repacked.p12 -k "$KEYCHAIN_NAME" -P "$REPACK_PASS" -A \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcodebuild -T /usr/bin/xcrun
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          echo "Listing identities..."
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"


      # âœ… Install provisioning profile
      - name: Install provisioning profile
        id: prov
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROV_PROFILE_BASE64" | base64 --decode > app.mobileprovision
          /usr/bin/security cms -D -i app.mobileprovision > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "uuid=$UUID" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "âœ… Installed $NAME ($UUID)"

      # âœ… Create export options (manual signing)
      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.prov.outputs.name }}</string>
            </dict>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          PLIST
          echo "âœ… ExportOptions.plist created"

      # âœ… Force env variables for Xcode to recognize cert
      - name: Build signed IPA
        env:
          CODE_SIGN_IDENTITY: "Apple Distribution: Yannick Durindel (${{ secrets.TEAM_ID }})"
          DEVELOPMENT_TEAM: ${{ secrets.TEAM_ID }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ steps.prov.outputs.name }}
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload signed IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-signed
          path: build/ios/ipa/*.ipa

      # âœ… TestFlight upload (if enabled)
      - name: Upload to TestFlight
        if: ${{ inputs.upload_to_testflight == 'true' }}
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          ASC_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY_P8 }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$ASC_KEY_CONTENTS" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n1)
          echo "ðŸš€ Uploading to TestFlight..."
          xcrun altool --upload-app --type ios --file "$IPA_PATH" --apiKey "$ASC_KEY_ID" --apiIssuer "$ASC_ISSUER_ID" --verbose