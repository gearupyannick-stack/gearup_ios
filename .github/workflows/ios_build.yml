name: iOS Archive & Export (manual signing) â€” stable import

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  archive-ios:
    runs-on: macos-15

    env:
      APP_BUNDLE_ID: com.gearup.app
      CODE_SIGN_IDENTITY: Apple Distribution

      # required
      CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
      CERT_P12_BASE64:   ${{ secrets.CERT_P12_BASE64 }}
      PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}

      # optional upload
      ASC_KEY_ID:        ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID:     ${{ secrets.ASC_ISSUER_ID }}
      ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Xcode / macOS info
        run: |
          set -euo pipefail
          xcodebuild -version
          xcode-select -p
          sw_vers

      - name: Set DEVELOPMENT_TEAM from secret
        shell: bash
        run: |
          set -euo pipefail
          TEAM="${{ secrets.APPLE_TEAM_ID }}"
          if [ -z "$TEAM" ]; then
            echo "ERROR: APPLE_TEAM_ID secret is not set."
            exit 1
          fi
          echo "Using DEVELOPMENT_TEAM=$TEAM"
          echo "DEVELOPMENT_TEAM=$TEAM" >> "$GITHUB_ENV"

      - name: Set up Flutter 3.35.5
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true

      - name: Decode signing assets
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import base64, os
          open('cert.p12','wb').write(base64.b64decode(os.environ['CERT_P12_BASE64']))
          open('profile.mobileprovision','wb').write(base64.b64decode(os.environ['PROV_PROFILE_BASE64']))
          PY
          ls -l cert.p12 profile.mobileprovision

      - name: Create & unlock temporary keychain, import p12 (no-hang)
        id: keychain
        shell: bash
        run: |
          set -euo pipefail

          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          KEYCHAIN_PASSWORD="$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 24)"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_OUTPUT
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_OUTPUT

          # create & unlock
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -d user -s "$KEYCHAIN_PATH"

          echo ">>> Importing p12 with -A to grant tool access (avoids UI prompts)..."
          # -A = allow all applications to access; we restrict with keychain scope anyway.
          security import cert.p12 -k "$KEYCHAIN_PATH" -P "${CERT_P12_PASSWORD}" -A

          echo ">>> (Optional) Setting key partition list (will not block if flaky)..."
          # Some runners hang here; we make it best-effort.
          ( security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" ) || true

          echo ">>> Verifying that a codesigning identity is present..."
          # must list at least one Apple Distribution identity after import
          security find-identity -v -p codesigning "$KEYCHAIN_PATH" || {
            echo "No codesigning identities found in temp keychain after import."
            exit 1
          }

      - name: Install provisioning profile
        id: prof
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i profile.mobileprovision > "$PROFILE_PLIST"

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PROFILE_PLIST")
          TEAM_IDENTIFIER=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$PROFILE_PLIST")
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$PROFILE_PLIST")

          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          echo "PROFILE_PLIST=$PROFILE_PLIST"        >> $GITHUB_OUTPUT
          echo "PROFILE_UUID=$PROFILE_UUID"          >> $GITHUB_OUTPUT
          echo "PROFILE_NAME=$PROFILE_NAME"          >> $GITHUB_OUTPUT
          echo "TEAM_IDENTIFIER=$TEAM_IDENTIFIER"    >> $GITHUB_OUTPUT
          echo "APP_IDENTIFIER=$APP_IDENTIFIER"      >> $GITHUB_OUTPUT

          echo "PROFILE_UUID=$PROFILE_UUID"       >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME"       >> $GITHUB_ENV
          echo "TEAM_IDENTIFIER=$TEAM_IDENTIFIER" >> $GITHUB_ENV
          echo "APP_IDENTIFIER=$APP_IDENTIFIER"   >> $GITHUB_ENV

      - name: Preflight signing report
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Keychain identities (codesigning) ==="
          security find-identity -v -p codesigning "${{ steps.keychain.outputs.KEYCHAIN_PATH }}" || true
          echo
          echo "=== Certificates in temp keychain (subject, expiry, serial) ==="
          security find-certificate -a -p "${{ steps.keychain.outputs.KEYCHAIN_PATH }}" | \
            /usr/bin/openssl x509 -noout -subject -enddate -serial || true
          echo
          echo "=== Provisioning profile check ==="
          /usr/libexec/PlistBuddy -c 'Print :Name'          "${{ steps.prof.outputs.PROFILE_PLIST }}"
          /usr/libexec/PlistBuddy -c 'Print :UUID'          "${{ steps.prof.outputs.PROFILE_PLIST }}"
          /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "${{ steps.prof.outputs.PROFILE_PLIST }}"
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "${{ steps.prof.outputs.PROFILE_PLIST }}"
          echo
          echo "Expect TeamIdentifier == ${DEVELOPMENT_TEAM}"
          echo "Expect application-identifier == ${DEVELOPMENT_TEAM}.${APP_BUNDLE_ID}"
          echo "Found application-identifier: ${APP_IDENTIFIER}"

      - name: Flutter deps & CocoaPods
        shell: bash
        run: |
          set -euo pipefail
          flutter --version
          dart --version
          flutter pub get
          pushd ios
          pod install --repo-update
          popd

      - name: Archive (manual signing; no CN hardcoding)
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath "$PWD/build/Runner.xcarchive" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY}" \
            DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APP_BUNDLE_ID}" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_UUID}" \
            clean archive

      - name: Write ExportOptions.plist (App Store)
        shell: bash
        run: |
          set -euo pipefail
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>teamID</key><string>${DEVELOPMENT_TEAM}</string>
              <key>signingStyle</key><string>manual</string>
              <key>signingCertificate</key><string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>destination</key><string>export</string>
              <key>stripSwiftSymbols</key><true/>
              <key>uploadSymbols</key><true/>
              <key>compileBitcode</key><false/>
            </dict>
          </plist>
          PLIST

      - name: Export IPA
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -exportArchive \
            -archivePath "$PWD/build/Runner.xcarchive" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$PWD/build/export"
          ls -la "$PWD/build/export"

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/export/*.ipa
          if-no-files-found: error

      - name: (Optional) Upload to App Store Connect (API key)
        if: ${{ env.ASC_KEY_ID != '' && env.ASC_ISSUER_ID != '' && env.ASC_KEY_P8_BASE64 != '' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          python3 - <<'PY'
          import base64, os
          b=os.environ['ASC_KEY_P8_BASE64']
          kid=os.environ['ASC_KEY_ID']
          path=os.path.expanduser(f"~/.appstoreconnect/private_keys/AuthKey_{kid}.p8")
          with open(path,"wb") as f: f.write(base64.b64decode(b))
          os.chmod(path, 0o600)
          print("Wrote", path)
          PY

          xcrun iTMSTransporter \
            -m upload \
            -apiKey "$ASC_KEY_ID" \
            -apiIssuer "$ASC_ISSUER_ID" \
            -assetFile build/export/*.ipa \
            -v informational

      - name: Cleanup keychain
        if: always()
        shell: bash
        run: |
          security delete-keychain "${{ steps.keychain.outputs.KEYCHAIN_PATH }}" || true