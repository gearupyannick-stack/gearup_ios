name: iOS Signed Build & Upload
on:
  workflow_dispatch: {}

jobs:
  build-and-upload:
    runs-on: macos-14
    env:
      APP_BUNDLE_ID: com.gearup.app
      TEAM_ID: ${{ secrets.TEAM_ID }}
      IOS_CERT_P12_PASSWORD: ${{ secrets.IOS_CERT_P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS files
        run: |
          git lfs install
          git lfs pull

      - name: Show Xcode
        run: |
          sw_vers
          xcodebuild -version
          test -f ios/Runner.xcodeproj/project.pbxproj
          if head -n1 ios/Runner.xcodeproj/project.pbxproj | grep -q 'version https://git-lfs.github.com/spec'; then
            echo "ERROR: ios/Runner.xcodeproj/project.pbxproj is a Git LFS pointer"; exit 1
          fi

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - run: flutter pub get

      # ---- cert/key import ----
      - name: Verify p12 password and prepare
        run: |
          set -euo pipefail
          CANDIDATES="dist.p12 ios/dist.p12 ios/gearup/dist.p12"
          FOUND=""
          for p in $CANDIDATES; do [ -s "$p" ] && { FOUND="$p"; break; }; done
          [ -z "$FOUND" ] && { echo "ERROR: No dist.p12 found"; exit 1; }
          echo "Using $FOUND"
          [ "$FOUND" != "dist.p12" ] && cp -f "$FOUND" dist.p12 || echo "dist.p12 already in place"
          if [ -n "${IOS_CERT_P12_PASSWORD:-}" ]; then PASSOPT="-passin env:IOS_CERT_P12_PASSWORD"; else PASSOPT="-passin pass:"; fi
          openssl pkcs12 -in dist.p12 -noout -info $PASSOPT >/dev/null

      - name: Create signing keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain login.keychain

      - name: Import cert + private key
        run: |
          set -euo pipefail
          if [ -n "${IOS_CERT_P12_PASSWORD:-}" ]; then PASSOPT="-passin env:IOS_CERT_P12_PASSWORD"; else PASSOPT="-passin pass:"; fi
          openssl pkcs12 -in dist.p12 $PASSOPT -clcerts -nokeys -out cert.cer
          openssl pkcs12 -in dist.p12 $PASSOPT -nocerts -nodes -out key.pem
          security import cert.cer -k build.keychain -A -t cert
          security import key.pem  -k build.keychain -A -t priv -P ""

      - name: Unlock keychain & allow codesign
        run: |
          set -euo pipefail
          if [ -f "$HOME/Library/Keychains/build.keychain-db" ]; then
            KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
          else
            KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"
          fi
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH" || true

      - name: Install provisioning profile
        id: prov
        run: |
          set -euo pipefail
          PROFILE=$(ls *.mobileprovision ios/*.mobileprovision ios/gearup/*.mobileprovision 2>/dev/null | head -n1 || true)
          [ -z "$PROFILE" ] && { echo "ERROR: No .mobileprovision found"; exit 1; }
          DIR="$HOME/Library/MobileDevice/Provisioning Profiles"; mkdir -p "$DIR"
          PLIST=$(/usr/bin/security cms -D -i "$PROFILE")
          NAME=$(echo "$PLIST" | /usr/bin/plutil -extract Name raw -)
          UUID=$(echo "$PLIST" | /usr/bin/plutil -extract UUID raw -)
          echo "Using profile: $NAME ($UUID)"
          cp -f "$PROFILE" "$DIR/$UUID.mobileprovision"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "uuid=$UUID" >> "$GITHUB_OUTPUT"

      # ---- ensure iOS 15.0 in Podfile and project ----
      - name: Ensure iOS min target 15.0 in Podfile and project
        run: |
          set -euo pipefail
          POD=ios/Podfile
          if [ ! -f "$POD" ]; then
            echo "ERROR: ios/Podfile missing."; exit 1
          fi
          if grep -qE "^[[:space:]]*platform :ios" "$POD"; then
            /usr/bin/sed -i '' -E "s/^[[:space:]]*platform :ios, *'[^']*'/platform :ios, '15.0'/" "$POD"
          else
            /usr/bin/sed -i '' "1s;^;platform :ios, '15.0'\n;" "$POD"
          fi
          echo "Podfile platform line:"
          grep -n "platform :ios" "$POD" || true

          PB=ios/Runner.xcodeproj/project.pbxproj
          /usr/bin/sed -i '' -E "s/IPHONEOS_DEPLOYMENT_TARGET = [0-9]+(\.[0-9]+)?;/IPHONEOS_DEPLOYMENT_TARGET = 15.0;/g" "$PB"
          echo "Project deployment target lines:"
          grep -n "IPHONEOS_DEPLOYMENT_TARGET" "$PB" | head || true

      - name: Force signing settings
        run: |
          set -euo pipefail
          PB=ios/Runner.xcodeproj/project.pbxproj
          BUNDLE="${APP_BUNDLE_ID}"
          TEAM="${TEAM_ID}"
          PROF="${{ steps.prov.outputs.name }}"
          /usr/bin/sed -i '' -E "s/(PRODUCT_BUNDLE_IDENTIFIER = )[^;]+;/\1${BUNDLE};/g" "$PB"
          /usr/bin/sed -i '' -E "s/(DEVELOPMENT_TEAM = )[^;]+;/\1${TEAM};/g" "$PB"
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_STYLE = )Automatic;/\1Manual;/g" "$PB"
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = )[^;]+;/\1Apple Distribution;/g" "$PB"
          /usr/bin/sed -i '' -E "s/(CODE_SIGN_IDENTITY = )iPhone Developer;/\1Apple Distribution;/g" "$PB"
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" "$PB"; then
            /usr/bin/sed -i '' -E "s/(PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE};)/\1\n\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = ${PROF};/g" "$PB"
          else
            /usr/bin/sed -i '' -E "s/(PROVISIONING_PROFILE_SPECIFIER = )[^;]+;/\1${PROF};/g" "$PB"
          fi

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?><plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${APP_BUNDLE_ID}</key><string>${{ steps.prov.outputs.name }}</string>
            </dict>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>compileBitcode</key><false/>
            <key>uploadBitcode</key><false/>
          </dict></plist>
          PLIST
          /usr/bin/plutil -p ExportOptions.plist

      - name: Clean Pods repo cache (fresh resolve)
        working-directory: ios
        run: |
          set -euo pipefail
          rm -rf Pods Podfile.lock
          pod repo update

      - name: Build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Verify build output
        run: |
          set -euo pipefail
          test -d build/ios/iphoneos/Runner.app && echo "Runner.app present ✅" || { echo "Runner.app missing ❌"; exit 1; }

      # -------- Archive UNSIGNED (avoid exit 65 during archive) --------
      - name: Archive (unsigned)
        run: |
          set -o pipefail
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            clean archive | tee xcodebuild-archive.log | xcpretty
          exit ${PIPESTATUS[0]}

      # -------- Export & SIGN with your App Store profile --------
      - name: Export IPA (sign during export)
        run: |
          set -euo pipefail
          if [ -f "$HOME/Library/Keychains/build.keychain-db" ]; then
            KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
          else
            KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"
          fi
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          set -o pipefail
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios/ipa \
            -allowProvisioningUpdates | tee xcodebuild-export.log | xcpretty
          exit ${PIPESTATUS[0]}

      - uses: actions/upload-artifact@v4
        with:
          name: Signed-IPA
          path: build/ios/ipa/*.ipa
          if-no-files-found: error
