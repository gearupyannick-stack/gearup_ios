name: iOS Signed Build, Upload & Symbolication

on:
  workflow_dispatch: {}

jobs:
  build-and-upload:
    runs-on: macos-14
    env:
      APP_BUNDLE_ID: com.gearup.app
      TEAM_ID: ${{ secrets.TEAM_ID }}
      ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      ASC_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENTS }}

    steps:
      - name: Select Xcode
        run: |
          set -e
          CANDIDATES=(/Applications/Xcode_16*.app /Applications/Xcode.app)
          for x in "${CANDIDATES[@]}"; do
            if [ -d "$x" ]; then sudo xcode-select -s "$x/Contents/Developer"; break; fi
          done
          xcodebuild -version

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS
        run: |
          git lfs install
          git lfs pull

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      # ---------- SIGNING FROM SECRETS ----------
      - name: Materialize signing assets
        id: signfiles
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          set -euo pipefail
          [ -n "${IOS_CERT_P12_BASE64:-}" ] || { echo "Missing IOS_CERT_P12_BASE64"; exit 2; }
          [ -n "${MOBILEPROVISION_BASE64:-}" ] || { echo "Missing MOBILEPROVISION_BASE64"; exit 2; }
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > dist.p12
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > AppStore.mobileprovision
          security cms -D -i AppStore.mobileprovision > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          echo "uuid=${UUID}" >> "$GITHUB_OUTPUT"
          echo "profilename=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Create keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security list-keychains -d user -s build.keychain login.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

      - name: Validate P12 password
        env:
          IOS_CERT_P12_PASSWORD: ${{ secrets.IOS_CERT_P12_PASSWORD }}
        run: |
          set -euo pipefail
          openssl pkcs12 -in dist.p12 -nokeys -clcerts -passin env:IOS_CERT_P12_PASSWORD >/dev/null

      - name: Import certificate
        env:
          IOS_CERT_P12_PASSWORD: ${{ secrets.IOS_CERT_P12_PASSWORD }}
        run: |
          set -euo pipefail
          security import dist.p12 -k build.keychain -P "$IOS_CERT_P12_PASSWORD" -A
          security find-identity -v -p codesigning build.keychain

      - name: Install provisioning profile
        run: |
          set -e
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp AppStore.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/${{ steps.signfiles.outputs.uuid }}.mobileprovision"

      # ---------- BUILD ----------
      - name: Prepare CocoaPods
        working-directory: ios
        run: |
          set -e
          gem install cocoapods --no-document || true
          pod repo update
          pod install

      - name: Flutter build ios
        run: flutter build ios --release --no-codesign

      - name: Xcode archive
        run: |
          set -eo pipefail
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            clean archive | xcpretty
          exit ${PIPESTATUS[0]}

      - name: Create ExportOptions.plist
        run: |
          cat > exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>com.gearup.app</key><string>${{ steps.signfiles.outputs.profilename }}</string>
            </dict>
          </dict></plist>
          PLIST

      - name: Export IPA (signed)
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eo pipefail
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist exportOptions.plist | xcpretty
          exit ${PIPESTATUS[0]}
          ls -R build/export

      - name: Locate artifacts
        id: locate
        run: |
          echo "ipa=$(ls -1 build/export/*.ipa | head -n1)" >> "$GITHUB_OUTPUT"
          echo "dsymdir=build/Runner.xcarchive/dSYMs" >> "$GITHUB_OUTPUT"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ${{ steps.locate.outputs.ipa }}

      - name: Zip dSYMs
        run: |
          cd build/Runner.xcarchive/dSYMs
          zip -r ../../dSYMs.zip . -q

      - name: Upload dSYMs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-dsyms
          path: build/dSYMs.zip

      - name: Write ASC API key
        run: |
          echo "$ASC_KEY_CONTENTS" > AuthKey_${ASC_KEY_ID}.p8
          chmod 600 AuthKey_${ASC_KEY_ID}.p8

      - name: Upload to App Store Connect
        run: |
          xcrun altool --upload-app \
            -f "${{ steps.locate.outputs.ipa }}" \
            -t ios \
            --apiKey "$ASC_KEY_ID" \
            --apiIssuer "$ASC_ISSUER_ID"
