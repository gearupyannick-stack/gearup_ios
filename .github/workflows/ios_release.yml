name: ios

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Optional: build number override (leave empty to auto)"
        required: false
        default: ""

jobs:
  ios:
    runs-on: macos-15

    env:
      # App & Team
      APP_BUNDLE_ID: com.gearup.app
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Secrets
      CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
      CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
      PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}

      # ðŸ‘‡ Put the exact profile *Name* from Apple here (not the UUID).
      # From your files it should be GearupAppStore.
      PROV_PROFILE_NAME: GearupAppStore

    steps:
      # 1) Checkout + Flutter
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter stable 3.35.5 (arm64)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.5"
          channel: stable
          architecture: arm64

      - name: Flutter pub get
        run: flutter pub get

      # 2) Import cert + install provisioning profile (NO parsing)
      - name: Import signing cert (Apple p12)
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.CERT_P12_BASE64 }}
          p12-password: ${{ env.CERT_P12_PASSWORD }}

      - name: Install provisioning profile (no parse, no security cms)
        shell: bash
        run: |
          set -euo pipefail

          # Diagnostics: show only length, never the secret
          python3 - <<'PY'
          import os, re
          v = os.environ.get('PROV_PROFILE_BASE64','')
          print(f"PROV_PROFILE_BASE64 length = {len(v)}")
          if not v.strip():
              raise SystemExit("ERROR: PROV_PROFILE_BASE64 is empty")
          PY

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          PROFILE_PATH=$(python3 - <<'PY'
          import os, base64, re, pathlib
          b64 = re.sub(r'\s+','', os.environ['PROV_PROFILE_BASE64'])
          raw = base64.b64decode(b64)
          p = pathlib.Path(os.environ['RUNNER_TEMP'])/'profile.mobileprovision'
          p.write_bytes(raw)
          print(p)
          PY
          )
          echo "Decoded to: $PROFILE_PATH"
          if [[ ! -s "$PROFILE_PATH" ]]; then
            echo "Decoded profile is empty"; exit 1
          fi

          # Copy under a deterministic name; Xcode scans this folder.
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/${{ env.PROV_PROFILE_NAME }}.mobileprovision"

          # ExportOptions will use this name (we do not parse the profile)
          echo "PROFILE_NAME=${PROV_PROFILE_NAME}" >> $GITHUB_ENV
          echo "Installed profile as: ${{ env.PROV_PROFILE_NAME }}"

      - name: CocoaPods install
        working-directory: ios
        run: |
          rm -f Podfile.lock
          pod repo update
          pod install

      # 3) ExportOptions + build number
      - name: Compute build number & create ExportOptions.plist
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ github.event.inputs.build_number }}" ]]; then
            BN="${{ github.event.inputs.build_number }}"
          else
            BN=$((1000 + ${{ github.run_number }}))
          fi
          echo "bn=$BN" >> $GITHUB_OUTPUT
          cat > ios/ci_export_appstore.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>signingCertificate</key><string>Apple Distribution</string>
              <key>signingStyle</key><string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>uploadSymbols</key><true/>
              <key>uploadBitcode</key><false/>
              <key>manageAppVersionAndBuildNumber</key><false/>
              <key>destination</key><string>export</string>
            </dict>
          </plist>
          PLIST
          echo "ExportOptions ready with BN=$BN and PROFILE_NAME=${PROFILE_NAME}"

      - name: Ensure Pods base config is included in Release.xcconfig (one-liner safe)
        run: |
          set -euo pipefail
          FILE="ios/Flutter/Release.xcconfig"
          LINE='#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
          grep -Fq "$LINE" "$FILE" || echo "$LINE" >> "$FILE"
          echo "Ensured include in $FILE"

      - name: Build (no codesign) with Flutter, then archive & export with xcodebuild (manual signing)
        env:
          BN: ${{ steps.prep.outputs.bn }}
        run: |
          set -euo pipefail

          # 1) Generate iOS build files but DON'T code sign
          flutter clean
          flutter build ios --release --no-codesign

          # 2) Paths
          WORKSPACE="ios/Runner.xcworkspace"
          SCHEME="Runner"
          CONFIG="Release"
          ARCHIVE_PATH="$PWD/build/ios/archive/Runner.xcarchive"
          EXPORT_PLIST="$PWD/ios/ci_export_appstore.plist"
          IPA_DIR="$PWD/build/ios/ipa"

          # 3) Archive with explicit signing settings
          #    We force manual signing and point to your Team, Profile Name, Bundle Id and Identity.
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIG" \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APP_BUNDLE_ID}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            clean archive | xcpretty

          # 4) Export a signed IPA with your ExportOptions.plist (already created earlier)
          mkdir -p "$IPA_DIR"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$EXPORT_PLIST" \
            -exportPath "$IPA_DIR" | xcpretty

          echo "IPA contents:"
          ls -lh "$IPA_DIR"

      # 5) Upload TestFlight
      - name: Upload to TestFlight
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.private_keys"
          python3 - <<'PY'
          import os, re, base64, pathlib
          b64 = re.sub(r'\s+','', os.environ['ASC_KEY_P8_BASE64'])
          raw = base64.b64decode(b64)
          p = pathlib.Path.home()/'.private_keys'/('AuthKey_%s.p8' % os.environ['ASC_KEY_ID'])
          p.write_bytes(raw)
          PY
          chmod 600 "$HOME/.private_keys/AuthKey_${ASC_KEY_ID}.p8"

          IPA="build/ios/ipa/Runner.ipa"
          test -s "$IPA" || (echo "IPA not found"; exit 1)

          xcrun iTMSTransporter \
            -m upload \
            -assetFile "$IPA" \
            -apiKey "$ASC_KEY_ID" \
            -apiIssuer "$ASC_ISSUER_ID" \
            -verbose

      - name: Keep IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/ipa/*.ipa