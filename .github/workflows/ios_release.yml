name: ios

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.5'
          architecture: arm64

      - name: Setup Flutter (stable arm64)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.5'
          architecture: arm64

      - name: Configure Flutter env for iOS pods
        shell: bash
        run: |
          set -euo pipefail

          # Find the real SDK root from the flutter binary
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd -P)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"

          # Precache the iOS engine so Flutter.xcframework exists
          flutter precache --ios --no-universal --force

          # Ensure the Pod helper exists in the project (CI agents don't have it in repo)
          mkdir -p ios/Flutter
          cp "$FLUTTER_ROOT/packages/flutter_tools/bin/podhelper.rb" ios/Flutter/podhelper.rb

          # Overwrite Generated.xcconfig so podhelper.rb reads the CORRECT FLUTTER_ROOT
          GEN_XC="ios/Flutter/Generated.xcconfig"
          : > "$GEN_XC"
          {
            echo "FLUTTER_ROOT=$FLUTTER_ROOT"
            echo "FLUTTER_APPLICATION_PATH=$GITHUB_WORKSPACE"
            echo "FLUTTER_TARGET=lib/main.dart"
            echo "DART_OBFUSCATION=false"
            echo "TRACK_WIDGET_CREATION=false"
            echo "TREE_SHAKE_ICONS=true"
            echo "PACKAGE_CONFIG=.dart_tool/package_config.json"
          } >> "$GEN_XC"

      - name: Flutter pub get
        run: flutter pub get

      - name: CocoaPods install
        shell: bash
        run: |
          set -euo pipefail
          rm -f ios/Podfile.lock
          pushd ios
          pod repo update
          pod install
          popd

      # 5) Build & export IPA
      - name: Build IPA (App Store)
        shell: bash
        env:
          APP_BUNDLE_ID: com.gearup.app
        run: |
          # Ensure Pods/ xconfigs are included (safety net)
          INCLUDE_LINE='#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
          FILE="ios/Flutter/Release.xcconfig"
          grep -Fq "$INCLUDE_LINE" "$FILE" || echo "$INCLUDE_LINE" >> "$FILE"
          flutter build ipa --release --export-options-plist=ios/ci_export_appstore.plist

      # 6) Upload to TestFlight (App Store Connect API key)
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/*.ipa
          issuer-id: ${{ secrets.ASC_ISSUER_ID }}
          api-key-id: ${{ secrets.ASC_KEY_ID }}
          api-private-key: ${{ secrets.ASC_KEY_P8_BASE64 }}