name: ios

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  APP_BUNDLE_ID: com.gearup.app
  PROV_PROFILE_NAME: GearupAppStore

jobs:
  ios:
    runs-on: macos-15

    steps:
      # 1) Checkout & Flutter ---------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: stable
          architecture: arm64

      - name: Flutter pub get
        run: flutter pub get

      # 2) Import signing cert + install provisioning profile ------------------
      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERT_P12_BASE64 }}
          p12-password: ${{ secrets.CERT_P12_PASSWORD }}

      - name: Install provisioning profile (robust)
        shell: bash
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$RUNNER_TEMP/profile.mobileprovision"

          echo "PROV_PROFILE_BASE64 length: ${#PROV_PROFILE_BASE64}"

          # Decode (strip all whitespace first; handle both BSD and GNU base64 flags)
          if printf '%s' "$PROV_PROFILE_BASE64" | tr -d '\n\r\t ' | base64 -D > "$PROFILE_PATH" 2>/dev/null; then
            :
          else
            printf '%s' "$PROV_PROFILE_BASE64" | tr -d '\n\r\t ' | base64 --decode > "$PROFILE_PATH"
          fi

          # Sanity checks
          [[ -s "$PROFILE_PATH" ]] || { echo "Decoded profile is empty"; exit 1; }

          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$RUNNER_TEMP/profile.plist" \
            || { echo "security cms failed (corrupt profile?)"; exit 1; }

          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$RUNNER_TEMP/profile.plist")
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$RUNNER_TEMP/profile.plist")

          [[ -n "$UUID" ]] || { echo "No UUID in profile (bad payload)"; exit 1; }

          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

          echo "PROFILE_NAME=$NAME" >> $GITHUB_ENV
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
          echo "Installed profile: $NAME ($UUID)"

      - name: Write ASC API key to expected path
        shell: bash
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          python3 - <<'PY'
          import os, base64, pathlib, re
          kid = os.environ['ASC_KEY_ID']
          b64 = re.sub(r'\s+', '', os.environ['ASC_KEY_P8_BASE64'])
          raw = base64.b64decode(b64)
          out = pathlib.Path.home()/".appstoreconnect/private_keys"/f"AuthKey_{kid}.p8"
          out.parent.mkdir(parents=True, exist_ok=True)
          out.write_bytes(raw)
          print(out)
          PY

      # 3) CocoaPods (and ensure CocoaPods base config is included) -----------
      - name: Pod install
        shell: bash
        run: |
          set -euo pipefail
          rm -f ios/Podfile.lock
          cd ios
          pod repo update
          pod install
          cd -

      - name: Ensure Pods base config is included in Release.xcconfig
        shell: bash
        run: |
          set -euo pipefail
          FILE="ios/Flutter/Release.xcconfig"
          LINE='#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
          grep -Fq "$LINE" "$FILE" || echo "$LINE" >> "$FILE"
          echo "Ensured include in $FILE"

      # 4) Generate config only, then archive & export with xcodebuild --------
      - name: Compute build number + export options
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          # monotonically increasing build number based on commits, or switch to your own
          BN=$(git rev-list --count HEAD)
          echo "bn=$BN" >> $GITHUB_OUTPUT

          # Write ExportOptions (uses manual signing with your profile name)
          cat > ios/ci_export_appstore.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.gearup.app</key><string>GearupAppStore</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>manageAppVersionAndBuildNumber</key><false/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          PLIST
          echo "ExportOptions ready with BN=$BN"

      - name: Generate iOS Xcode config (no compile)
        shell: bash
        run: |
          set -euo pipefail
          # Prefer config-only to avoid device compile in Flutter step
          # If your Flutter version didnâ€™t recognize --config-only, this will no-op gracefully.
          flutter clean
          flutter pub get
          (flutter build ios --config-only) || true

      - name: Archive & Export (xcodebuild manual signing)
        shell: bash
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_BUNDLE_ID: com.gearup.app
          PROFILE_NAME: ${{ env.PROV_PROFILE_NAME }}
          BN: ${{ steps.prep.outputs.bn }}
        run: |
          set -euo pipefail

          # Make sure Pods are integrated
          cd ios
          pod install
          cd -

          # Update version/build number inside Xcode project (marketing + build)
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.${BN}" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BN}" ios/Runner/Info.plist

          WORKSPACE="ios/Runner.xcworkspace"
          SCHEME="Runner"
          CONFIG="Release"
          ARCHIVE_PATH="$PWD/build/ios/archive/Runner.xcarchive"
          EXPORT_PLIST="$PWD/ios/ci_export_appstore.plist"
          IPA_DIR="$PWD/build/ios/ipa"

          # Archive (generic device) with explicit signing
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIG" \
            -archivePath "$ARCHIVE_PATH" \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APP_BUNDLE_ID}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            clean archive | xcpretty

          mkdir -p "$IPA_DIR"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$EXPORT_PLIST" \
            -exportPath "$IPA_DIR" | xcpretty

          ls -lh "$IPA_DIR"

      # 5) Upload to TestFlight ------------------------------------------------
      - name: Upload to TestFlight (App Store Connect API Key)
        shell: bash
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        run: |
          set -euo pipefail
          IPA="$(ls -1 build/ios/ipa/*.ipa | head -n1)"
          echo "Uploading $IPA"
          # iTMSTransporter is the supported path; altool delegates to it anyway.
          xcrun iTMSTransporter -m upload -assetFile "$IPA" \
            -apiKey "$ASC_KEY_ID" -apiIssuer "$ASC_ISSUER_ID" \
            -v informational
          echo "Upload requested."