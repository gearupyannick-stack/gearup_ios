name: ios

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.5'
          architecture: arm64

      # 1) Force FLUTTER_ROOT and precache iOS artifacts
      - name: Precache iOS engine + make podhelper available
        shell: bash
        run: |
          echo "FLUTTER_ROOT=${{ env.FLUTTER_HOME }}" >> "$GITHUB_ENV"
          flutter --version
          flutter doctor -v
          flutter precache --ios --no-universal --force
          mkdir -p ios/Flutter
          cp "$FLUTTER_ROOT/packages/flutter_tools/bin/podhelper.rb" ios/Flutter/podhelper.rb

      - name: Pub get
        run: flutter pub get

      # 2) Import signing cert
      - name: Import code-signing cert
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERT_P12_BASE64 }}
          p12-password: ${{ secrets.CERT_P12_PASSWORD }}

      # 3) Install provisioning profile
      - name: Install provisioning profile
        shell: bash
        env:
          PROV_PROFILE_BASE64: ${{ secrets.PROV_PROFILE_BASE64 }}
          PROFILE_NAME: GearupAppStore
        run: |
          PROFILE_PATH="$RUNNER_TEMP/profile.mobileprovision"
          echo "$PROV_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"
          if ! /usr/bin/security cms -D -i "$PROFILE_PATH" >/dev/null 2>&1; then
            echo "Decoded profile is invalid/empty"; exit 1
          fi
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(/usr/bin/security cms -D -i "$PROFILE_PATH")")
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"

      # 4) CocoaPods with the proper env
      - name: Pod install (fresh)
        shell: bash
        env:
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}
        run: |
          rm -f ios/Podfile.lock
          pushd ios
          pod repo update
          pod install
          popd

      # 5) Build & export IPA
      - name: Build IPA (App Store)
        shell: bash
        env:
          APP_BUNDLE_ID: com.gearup.app
        run: |
          # Ensure Pods/ xconfigs are included (safety net)
          INCLUDE_LINE='#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
          FILE="ios/Flutter/Release.xcconfig"
          grep -Fq "$INCLUDE_LINE" "$FILE" || echo "$INCLUDE_LINE" >> "$FILE"
          flutter build ipa --release --export-options-plist=ios/ci_export_appstore.plist

      # 6) Upload to TestFlight (App Store Connect API key)
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/*.ipa
          issuer-id: ${{ secrets.ASC_ISSUER_ID }}
          api-key-id: ${{ secrets.ASC_KEY_ID }}
          api-private-key: ${{ secrets.ASC_KEY_P8_BASE64 }}