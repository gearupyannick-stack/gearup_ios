name: ios
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-15
    env:
      APP_BUNDLE_ID: com.gearup.app
      KEYCHAIN_NAME: signing_${{ github.run_id }}
      PROFILE_NAME: GearupAppStore

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: /Users/runner/hostedtoolcache/flutter
          key: flutter-stable-3.35.5-arm64

      - name: Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.5'
          architecture: arm64

      # Select Xcode 16 (iOS 18 SDK)
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'  # You can also try '16' or '16.1' if available
  
      - name: Ensure iOS device platform is installed
        run: |
          set -euxo pipefail
          # Show what we currently have
          xcodebuild -showsdks || true
          # Download the iOS device platform for this Xcode if it's missing
          if ! xcodebuild -showsdks | grep -q 'iphoneos18'; then
            sudo xcodebuild -downloadPlatform iOS
          else
            # Some images still need the platform even when the SDK shows up:
            sudo xcodebuild -downloadPlatform iOS || true
          fi
          # One-time Xcode initialization on fresh images (safe to run always)
          sudo xcodebuild -runFirstLaunch

      - name: Check Xcode version
        run: |
          xcodebuild -version
          xcode-select -p

      - name: Verify iOS SDKs present
        run: |
          xcodebuild -showsdks
          xcrun --sdk iphoneos --show-sdk-version

      - name: Precache iOS engine & write podhelper/xcconfig
        shell: bash
        run: |
          set -euo pipefail
          flutter precache --ios --no-universal --force
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_ROOT="$(cd "$(dirname "$FLUTTER_BIN")/.." && pwd -P)"
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> "$GITHUB_ENV"
          mkdir -p ios/Flutter
          cp "$FLUTTER_ROOT/packages/flutter_tools/bin/podhelper.rb" ios/Flutter/podhelper.rb
          cat > ios/Flutter/Generated.xcconfig <<EOF
          FLUTTER_ROOT=$FLUTTER_ROOT
          FLUTTER_APPLICATION_PATH=$GITHUB_WORKSPACE
          FLUTTER_TARGET=lib/main.dart
          DART_OBFUSCATION=false
          TRACK_WIDGET_CREATION=false
          TREE_SHAKE_ICONS=true
          PACKAGE_CONFIG=.dart_tool/package_config.json
          EOF

      - name: Clean Flutter build
        run: flutter clean

      - name: flutter pub get
        run: flutter pub get

      - name: CocoaPods install
        shell: bash
        run: |
          set -euo pipefail
          pushd ios
          pod repo update
          rm -f Podfile.lock
          pod install
          popd

      - name: Import code signing cert
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          p12-password:    ${{ secrets.IOS_CERT_P12_PASSWORD }}
          keychain:        ${{ env.KEYCHAIN_NAME }}
          create-keychain: true

      - name: Normalize Podfile quotes (avoid smart quotes)
        working-directory: ios
        run: |
          # Replace any curly quotes with straight ASCII quotes.
          perl -0777 -pe "tr/“”‘’/\"\"''/;" -i Podfile
          echo "Podfile normalized."

      - name: Write clean Release.xcconfig (manual signing + iOS-only)
        run: |
          printf '%s\n' \
          '#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"' \
          '' \
          'PRODUCT_BUNDLE_IDENTIFIER=com.gearup.app' \
          'DEVELOPMENT_TEAM=M282YL56RT' \
          'PROVISIONING_PROFILE_SPECIFIER=GearupAppStore' \
          'CODE_SIGN_STYLE=Manual' \
          '' \
          'MARKETING_VERSION=1.0.1' \
          'CURRENT_PROJECT_VERSION=3' \
          'IPHONEOS_DEPLOYMENT_TARGET=15.0' \
          > ios/Flutter/Release.xcconfig

          echo "----- ios/Flutter/Release.xcconfig -----"
          nl -ba ios/Flutter/Release.xcconfig
          echo "----------------------------------------"

      - name: Sanity-check critical settings
        run: |
          grep -q '^DEVELOPMENT_TEAM=M282YL56RT$' ios/Flutter/Release.xcconfig
          grep -q '^PROVISIONING_PROFILE_SPECIFIER=GearupAppStore$' ios/Flutter/Release.xcconfig
          grep -q '^PRODUCT_BUNDLE_IDENTIFIER=com.gearup.app$' ios/Flutter/Release.xcconfig
          grep -q '^IPHONEOS_DEPLOYMENT_TARGET=15.0$' ios/Flutter/Release.xcconfig

      - name: Ensure iOS only (no Catalyst targets)
        working-directory: ios
        run: |
          # Guard rails in case Catalyst sneaks in; these are no-ops if absent.
          /usr/libexec/PlistBuddy -c "Delete :targets:0:attributes:LastSwiftMigration" Runner.xcodeproj/project.pbxproj || true
          /usr/libexec/PlistBuddy -c "Delete :targets:0:attributes:LastSwiftUpdateCheck" Runner.xcodeproj/project.pbxproj || true
          # Force iOS-only by removing any accidental Mac Catalyst settings (safe to run).
          sed -i '' '/MACCATALYST/d' Runner.xcodeproj/project.pbxproj || true

      - name: Force UTF-8 for Ruby/CocoaPods
        run: |
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "RUBYOPT=-EUTF-8:UTF-8" >> $GITHUB_ENV

      # (your Flutter precache / Generated.xcconfig steps go before this)

      - name: Replace Podfile with clean ASCII (iOS-only)
        working-directory: ios
        run: |
          cat > Podfile <<'RUBY'
          platform :ios, '15.0'

          flutter_root = ENV['FLUTTER_ROOT']
          if flutter_root.nil? || !File.directory?(flutter_root)
            generated = File.expand_path(File.join(__dir__, 'Flutter', 'Generated.xcconfig'))
            if File.exist?(generated)
              File.foreach(generated) do |line|
                m = line.match(/^FLUTTER_ROOT=(.*)$/)
                if m
                  flutter_root = m[1].strip
                  break
                end
              end
            end
          end
          raise 'FLUTTER_ROOT is not set or invalid.' if flutter_root.nil? || !File.directory?(flutter_root)

          require File.expand_path('Flutter/podhelper.rb', __dir__)

          target 'Runner' do
            use_frameworks! :linkage => :static
            use_modular_headers!

            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |t|
              t.build_configurations.each do |config|
                config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
              end
            end
          end
          RUBY

          # Strip any BOM or CRLF just in case
          perl -i -pe 's/^\xEF\xBB\xBF//; s/\r$//' Podfile

          echo "----- Podfile -----"
          nl -ba Podfile | sed -n '1,200p'
          echo "-------------------"

      - name: CocoaPods (fresh install)
        working-directory: ios
        run: |
          pod deintegrate || true
          rm -rf Pods Podfile.lock
          pod install --verbose

      - name: Pod install (explicit)
        working-directory: ios
        run: |
          pod repo update
          pod install --verbose

      - name: Build iOS artifacts (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Make signing keychain default
        shell: bash
        run: |
          security default-keychain -s "${KEYCHAIN_NAME}.keychain"

      - name: Download provisioning profile
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id:        ${{ env.APP_BUNDLE_ID }}
          issuer-id:        ${{ secrets.ASC_ISSUER_ID }}
          api-key-id:       ${{ secrets.ASC_KEY_ID }}
          api-private-key:  ${{ secrets.ASC_KEY_P8 }}
          profile-type:     IOS_APP_STORE

      - name: Show installed signing identities
        run: security find-identity -v -p codesigning "${KEYCHAIN_NAME}.keychain" || true

      - name: Show downloaded provisioning profiles
        run: |
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "== $f ==" 
            /usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<<"$(/usr/bin/security cms -D -i "$f")"
            /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<<"$(/usr/bin/security cms -D -i "$f")"
            /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' /dev/stdin <<<"$(/usr/bin/security cms -D -i "$f")"
            /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<<"$(/usr/bin/security cms -D -i "$f")"
          done

      - name: Create ExportOptions.plist
        run: |
          cat > ios/ci_export_appstore.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>M282YL56RT</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.gearup.app</key><string>GearupAppStore</string>
            </dict>
            <key>compileBitcode</key><true/>
            <key>uploadBitcode</key><false/>
          </dict>
          </plist>
          PLIST

      - name: Force manual signing settings (Release)
        run: |
          cat >> ios/Flutter/Release.xcconfig <<'EOF'
          DEVELOPMENT_TEAM=M282YL56RT
          PRODUCT_BUNDLE_IDENTIFIER=com.gearup.app
          CODE_SIGN_STYLE=Manual
          CODE_SIGN_IDENTITY=Apple Distribution
          PROVISIONING_PROFILE_SPECIFIER=GearupAppStore
          EOF

      - name: Show Xcode signing settings (Release)
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
                    -scheme Runner \
                    -configuration Release \
                    -showBuildSettings | egrep 'CODE_SIGN|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE'

      # Archive with Xcode (Release, phone-only)
      - name: Archive with Xcode
        run: |
          set -euo pipefail
          # Make sure Pods profile is included
          INCLUDE_LINE='#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
          FILE="ios/Flutter/Release.xcconfig"
          grep -Fq "$INCLUDE_LINE" "$FILE" || echo "$INCLUDE_LINE" >> "$FILE"

          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/Runner.xcarchive \
            DEVELOPMENT_TEAM=M282YL56RT \
            PRODUCT_BUNDLE_IDENTIFIER=com.gearup.app \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="GearupAppStore" \
            IPHONEOS_DEPLOYMENT_TARGET=15.0 \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      # Export a signed IPA using ExportOptions.plist you already wrote
      - name: Export IPA
        run: |
          set -euo pipefail
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist ios/ci_export_appstore.plist | xcpretty && exit ${PIPESTATUS[0]}

      - name: Show exported IPA
        run: ls -la build/export

      - name: Verify built IPA exists
        run: ls -lh build/ios/ipa

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/export/Runner.ipa
          issuer-id: ${{ secrets.ASC_ISSUER_ID }}
          api-key-id: ${{ secrets.ASC_KEY_ID }}
          api-private-key: ${{ secrets.ASC_KEY_P8 }}